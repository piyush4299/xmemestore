{"version":3,"sources":["./src/app/meme-detail/memeItems/memeItem.ts","./src/app/meme-detail/memeItems/memeItem.html","./src/app/sharedDetails/memeDetail.model.ts","./src/environments/environment.ts","./src/app/http-intercepter.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/sharedDetails/memeDetail.Service.ts","./src/app/meme-detail/meme-detail.component.html","./src/app/meme-detail/meme-detail.component.ts","./src/app/app.module.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component,Input,Output,EventEmitter } from '@angular/core';\r\nimport { memeDetail } from 'src/app/sharedDetails/memeDetail.model';\r\n\r\n@Component({\r\n    selector: 'app-memeItem',\r\n    templateUrl: './memeItem.html',\r\n    styleUrls: ['./memeItem.css']\r\n})\r\n\r\nexport class memeItemComponent{\r\n\r\n    @Input() memeObject:memeDetail;\r\n    @Output() myEditEvent = new EventEmitter();\r\n    @Output() myDeleteEvent = new EventEmitter();\r\n\r\n    constructor(){\r\n        this.memeObject = new memeDetail();\r\n    }\r\n\r\n    onEdit(memeObject:memeDetail) {\r\n        this.myEditEvent.emit(memeObject);\r\n    }\r\n\r\n    onDelete(memeObject:memeDetail){\r\n        this.myDeleteEvent.emit(memeObject);\r\n    }\r\n}","<div class=\"col s12 m6\">\r\n    <div class=\"card\" style = \"background-color: #3c8cf0;\">\r\n    <span class=\"card-title\">Meme Owner: {{ memeObject.name }}</span>\r\n    <div class=\"card-image imgContainer\">\r\n        <img [src]=\"memeObject.memeURL\" style= \"object-fit:cover;\" onerror=\"this.src='https://www.jco.fi/wp-content/uploads/2019/10/hero-blog-404.jpg'\"/>\r\n    </div>\r\n        <div class=\"card-content\">\r\n            <p>Caption: {{ memeObject.caption }}</p>\r\n        </div>\r\n            <a class=\"action-btn btn-floating waves-effect waves-light blue\" (click)=\"onEdit(memeObject)\">\r\n                <i class=\"material-icons\">edit</i>\r\n            </a>\r\n            <a class=\"action-btn btn-floating waves-effect waves-light blue\" (click)=\"onDelete(memeObject)\">\r\n                <i class=\"material-icons\">delete</i>\r\n            </a>\r\n    </div>\r\n</div>","export class memeDetail{\r\n    _id: any = null;\r\n    name: string = \"\";\r\n    caption: string = \"\";\r\n    memeURL: string = \"\";\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpIntercepterService {\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        if (error.error instanceof ErrorEvent) {\n          // If client side error occured then handle it as below.\n          console.error('An error occurred:', error.error.message);\n        } else {\n          // If backend returned an unsuccessful response code.\n          console.error(\n            `Issue at Backend side. Code => ${error.status}, body was: ${error.error}`\n          );\n        }\n        return throwError('Please Try Again Later');\n      })\n    );\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'memeStoreApp';\n}\n","<app-header></app-header>\n<app-meme-detail></app-meme-detail>\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { memeDetail } from './memeDetail.model';\r\n\r\n@Injectable()\r\nexport class memeDetailService{\r\n  selectedMeme: memeDetail;\r\n  memeDetails: memeDetail[];\r\n\r\n  constructor(private http: HttpClient) { \r\n      this.selectedMeme = new memeDetail();\r\n      this.memeDetails = [new memeDetail()];\r\n  }\r\n\r\n  postMeme(meme: memeDetail){\r\n      return this.http.post(\"memes\",meme);\r\n  }\r\n\r\n  getPostedMemes(){\r\n      return this.http.get(\"memes\");\r\n  }\r\n\r\n  patchMeme(memeObject: memeDetail) {\r\n    return this.http.patch(`memes/${memeObject._id}`, memeObject);\r\n  }\r\n\r\n  deleteMeme(memeObject:memeDetail){\r\n    return this.http.delete(`memes/${memeObject._id}`)\r\n  }\r\n}","<div class=\"row container-fluid\">\n  <div class=\"col s12\">\n    <div class=\"card\">\n      <div class=\"card-content white-text\">\n        <div class=\"row\">\n          <div class=\"col s5\">\n            <form #memeDetailForm=\"ngForm\" (ngSubmit)=\"onSubmit(memeDetailForm)\">\n              <input type=\"hidden\" name=\"_id\" #_id=\"ngModel\" [(ngModel)]=\"memeDetailService.selectedMeme._id\">\n              <div class=\"row\">\n                <div class=\"input-field col s12\">\n                  <input type=\"text\" name=\"name\" #name=\"ngModel\" [(ngModel)]=\"memeDetailService.selectedMeme.name\" placeholder=\"Enter Meme Owner name\" required>\n                  <label>Meme Owner Name :\n                    <label class=\"red-text\">*</label>\n                  </label>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"input-field col s12\">\n                  <input type=\"text\" name=\"caption\" #name=\"ngModel\" [(ngModel)]=\"memeDetailService.selectedMeme.caption\" placeholder=\"Caption for meme\">\n                  <label>Caption :</label>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"input-field col s12\">\n                  <input type=\"text\" name=\"memeURL\" #name=\"ngModel\" [(ngModel)]=\"memeDetailService.selectedMeme.memeURL\" placeholder=\"Enter meme image URL\">\n                  <label>Meme(Image) URL :</label>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"input-field col s12\">\n                  <button class=\"btn btn-custom right\" type=\"button\" (click)=\"resetForm(memeDetailForm)\"><span style = \"color: black;\">Reset</span></button>\n                  <button class=\"btn btn-custom right\" type=\"submit\" [disabled]=\"!memeDetailForm.valid\"><span style = \"color: black;\">Submit</span></button>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div class=\"col s7\">\n            <div *ngFor=\"let memeObject of memeDetailService.memeDetails\">\n                <app-memeItem [memeObject] = \"memeObject\" (myEditEvent)=\"onEdit($event)\" (myDeleteEvent) = \"onDelete($event,memeDetailForm)\"></app-memeItem>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\n\nimport { memeDetailService } from '../sharedDetails/memeDetail.Service';\nimport { memeDetail } from '../sharedDetails/memeDetail.model';\n\n\n\n@Component({\n  selector: 'app-meme-detail',\n  templateUrl: './meme-detail.component.html',\n  styleUrls: ['./meme-detail.component.css']\n})\n\nexport class MemeDetailComponent implements OnInit {\n\n  constructor(public memeDetailService: memeDetailService,private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.resetForm();\n    this.refreshMemeList();\n  }\n\n  resetForm(form?: NgForm) {\n    if (form)\n      form.reset();\n    this.memeDetailService.selectedMeme = {\n      _id: null,\n      name: \"\",\n      caption:\"\",\n      memeURL: \"\"\n    }\n    this.refreshMemeList();\n  }\n\n  onSubmit(form: NgForm){\n    if(form.value._id === null){\n      this.memeDetailService.postMeme(form.value).subscribe((res) => {\n        this.resetForm(form);\n        this.refreshMemeList();\n        this.toastr.success(\"Meme details saved successfully!!\");\n      });\n    }\n    else{\n      this.memeDetailService.patchMeme(form.value).subscribe((res) => {\n        this.resetForm(form);\n        this.refreshMemeList();\n        this.toastr.success(\"Meme detail updated successfully!!\");\n      });\n    }\n  }\n\n  refreshMemeList(){\n    this.memeDetailService.getPostedMemes().subscribe((res) => {\n      this.memeDetailService.memeDetails = res as memeDetail[];\n    })\n  }\n\n  onEdit(memeObject: memeDetail){\n    this.memeDetailService.selectedMeme = memeObject;\n  }\n\n  onDelete(memeObject: memeDetail,form: NgForm){\n    if(confirm('Are you sure about deleting the meme?') == true){\n      this.memeDetailService.deleteMeme(memeObject).subscribe((res) => {\n        this.refreshMemeList();\n        this.resetForm(form);\n        this.toastr.success(\"Selected meme deleted successfully!!\");\n      });\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MemeDetailComponent } from './meme-detail/meme-detail.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { memeDetailService } from './sharedDetails/memeDetail.Service';\nimport { memeItemComponent } from './meme-detail/memeItems/memeItem';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpIntercepterService } from './http-intercepter.service';\nimport { ToastrModule } from 'ngx-toastr';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    memeItemComponent,\n    MemeDetailComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    ToastrModule.forRoot({\n      timeOut: 1000,\n      positionClass: 'toast-bottom-left'\n    })\n  ],\n  providers: [memeDetailService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpIntercepterService,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nav class = \"navbar navbar-default\">\n    <div class = \"container\">\n        <div class = \"navbar-header\">\n            <a href = \"#\" class = \"navbar-brand\">Meme Store</a>\n        </div>\n    </div>\n</nav>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}